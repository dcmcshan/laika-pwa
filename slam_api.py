#!/usr/bin/env python3
"""
LAIKA PWA SLAM API Backend
Serves SLAM data files generated by LAIKA service
Compatible with ngrok tunneling
"""

import os
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

from flask import Flask, jsonify, request, send_file
from flask_cors import CORS

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class LAIKASLAMApi:
    """
    Flask API for serving SLAM data to PWA
    
    Features:
    - Serves map data from files
    - Robot status and telemetry
    - Waypoint management
    - Navigation control
    - Exploration mode
    """
    
    def __init__(self, slam_data_dir: str = "/home/pi/LAIKA/slam_data"):
        """Initialize SLAM API"""
        self.app = Flask(__name__)
        CORS(self.app)  # Enable CORS for PWA access
        
        self.slam_data_dir = Path(slam_data_dir)
        self.slam_generator = None  # Will be set if available
        
        # Ensure data directory exists
        self.slam_data_dir.mkdir(parents=True, exist_ok=True)
        
        # Setup routes
        self.setup_routes()
        
        logger.info(f"üåê LAIKA SLAM API initialized - Data dir: {slam_data_dir}")
    
    def setup_routes(self):
        """Setup Flask routes"""
        
        @self.app.route('/api/slam/status', methods=['GET'])
        def get_slam_status():
            """Get current SLAM system status"""
            try:
                status_file = self.slam_data_dir / "slam_stats.json"
                if status_file.exists():
                    with open(status_file, 'r') as f:
                        data = json.load(f)
                    return jsonify({
                        "success": True,
                        "data": data
                    })
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM data not available",
                        "data": {
                            "status": "offline",
                            "is_mapping": False,
                            "is_navigating": False,
                            "is_exploring": False
                        }
                    })
            except Exception as e:
                logger.error(f"‚ùå Error getting SLAM status: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/map', methods=['GET'])
        def get_map_data():
            """Get current map data"""
            try:
                map_file = self.slam_data_dir / "map.json"
                if map_file.exists():
                    with open(map_file, 'r') as f:
                        data = json.load(f)
                    return jsonify({
                        "success": True,
                        "data": data
                    })
                else:
                    return jsonify({
                        "success": False,
                        "error": "Map data not available"
                    }), 404
            except Exception as e:
                logger.error(f"‚ùå Error getting map data: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/robot_status', methods=['GET'])
        def get_robot_status():
            """Get current robot status"""
            try:
                status_file = self.slam_data_dir / "robot_status.json"
                if status_file.exists():
                    with open(status_file, 'r') as f:
                        data = json.load(f)
                    return jsonify({
                        "success": True,
                        "data": data
                    })
                else:
                    return jsonify({
                        "success": False,
                        "error": "Robot status not available"
                    }), 404
            except Exception as e:
                logger.error(f"‚ùå Error getting robot status: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/path', methods=['GET'])
        def get_robot_path():
            """Get robot path history"""
            try:
                path_file = self.slam_data_dir / "robot_path.json"
                if path_file.exists():
                    with open(path_file, 'r') as f:
                        data = json.load(f)
                    return jsonify({
                        "success": True,
                        "data": data
                    })
                else:
                    return jsonify({
                        "success": False,
                        "error": "Path data not available"
                    }), 404
            except Exception as e:
                logger.error(f"‚ùå Error getting path data: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/waypoints', methods=['GET'])
        def get_waypoints():
            """Get all waypoints"""
            try:
                waypoints_file = self.slam_data_dir / "waypoints.json"
                if waypoints_file.exists():
                    with open(waypoints_file, 'r') as f:
                        data = json.load(f)
                    return jsonify({
                        "success": True,
                        "data": data
                    })
                else:
                    return jsonify({
                        "success": True,
                        "data": {
                            "waypoints": [],
                            "current_target": None,
                            "timestamp": time.time()
                        }
                    })
            except Exception as e:
                logger.error(f"‚ùå Error getting waypoints: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/waypoints', methods=['POST'])
        def add_waypoint():
            """Add a new waypoint"""
            try:
                data = request.get_json()
                if not data:
                    return jsonify({"success": False, "error": "No data provided"}), 400
                
                # Validate required fields
                required_fields = ['name', 'x', 'y']
                for field in required_fields:
                    if field not in data:
                        return jsonify({"success": False, "error": f"Missing field: {field}"}), 400
                
                # Try to add waypoint via SLAM generator if available
                if self.slam_generator:
                    success = self.slam_generator.add_waypoint(
                        name=data['name'],
                        x=float(data['x']),
                        y=float(data['y']),
                        description=data.get('description', '')
                    )
                    
                    if success:
                        return jsonify({
                            "success": True,
                            "message": f"Waypoint '{data['name']}' added successfully"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to add waypoint (may be outside safe boundary)"
                        }), 400
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
                    
            except Exception as e:
                logger.error(f"‚ùå Error adding waypoint: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/mapping/start', methods=['POST'])
        def start_mapping():
            """Start SLAM mapping"""
            try:
                if self.slam_generator:
                    success = self.slam_generator.start_mapping()
                    if success:
                        return jsonify({
                            "success": True,
                            "message": "SLAM mapping started"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to start mapping"
                        }), 500
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error starting mapping: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/mapping/stop', methods=['POST'])
        def stop_mapping():
            """Stop SLAM mapping"""
            try:
                if self.slam_generator:
                    success = self.slam_generator.stop_mapping()
                    if success:
                        return jsonify({
                            "success": True,
                            "message": "SLAM mapping stopped"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to stop mapping"
                        }), 500
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error stopping mapping: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/exploration/start', methods=['POST'])
        def start_exploration():
            """Start autonomous exploration"""
            try:
                if self.slam_generator:
                    success = self.slam_generator.start_exploration()
                    if success:
                        return jsonify({
                            "success": True,
                            "message": "Exploration started"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to start exploration"
                        }), 500
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error starting exploration: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/exploration/stop', methods=['POST'])
        def stop_exploration():
            """Stop autonomous exploration"""
            try:
                if self.slam_generator:
                    success = self.slam_generator.stop_exploration()
                    if success:
                        return jsonify({
                            "success": True,
                            "message": "Exploration stopped"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to stop exploration"
                        }), 500
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error stopping exploration: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/navigation', methods=['POST'])
        def navigate_to_waypoint():
            """Navigate to a specific waypoint"""
            try:
                data = request.get_json()
                if not data or 'waypoint_name' not in data:
                    return jsonify({"success": False, "error": "waypoint_name required"}), 400
                
                if self.slam_generator:
                    success = self.slam_generator.navigate_to_waypoint(data['waypoint_name'])
                    if success:
                        return jsonify({
                            "success": True,
                            "message": f"Navigation to '{data['waypoint_name']}' started"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to start navigation (waypoint not found?)"
                        }), 400
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error starting navigation: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/navigation/stop', methods=['POST'])
        def stop_navigation():
            """Stop current navigation"""
            try:
                if self.slam_generator:
                    # Stop both navigation and exploration
                    nav_success = True
                    exp_success = True
                    
                    if hasattr(self.slam_generator, 'slam_stats') and self.slam_generator.slam_stats.is_navigating:
                        # Stop navigation by clearing state
                        with self.slam_generator._update_lock:
                            self.slam_generator.slam_stats.is_navigating = False
                            self.slam_generator.slam_stats.current_waypoint = None
                            self.slam_generator.planned_path = []
                    
                    if hasattr(self.slam_generator, 'is_exploring') and self.slam_generator.is_exploring:
                        exp_success = self.slam_generator.stop_exploration()
                    
                    if nav_success and exp_success:
                        return jsonify({
                            "success": True,
                            "message": "Navigation stopped"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to stop navigation"
                        }), 500
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error stopping navigation: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/map/save', methods=['POST'])
        def save_map():
            """Save current map"""
            try:
                data = request.get_json() or {}
                map_name = data.get('name', f'map_{int(time.time())}')
                
                if self.slam_generator:
                    success = self.slam_generator.save_map(map_name)
                    if success:
                        return jsonify({
                            "success": True,
                            "message": f"Map saved as '{map_name}'"
                        })
                    else:
                        return jsonify({
                            "success": False,
                            "error": "Failed to save map"
                        }), 500
                else:
                    return jsonify({
                        "success": False,
                        "error": "SLAM generator not available"
                    }), 503
            except Exception as e:
                logger.error(f"‚ùå Error saving map: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/maps', methods=['GET'])
        def list_saved_maps():
            """List all saved maps"""
            try:
                maps_dir = self.slam_data_dir / "maps"
                maps = []
                
                if maps_dir.exists():
                    for map_file in maps_dir.glob("*.json"):
                        try:
                            with open(map_file, 'r') as f:
                                map_data = json.load(f)
                            
                            maps.append({
                                "filename": map_file.name,
                                "name": map_data.get("name", map_file.stem),
                                "timestamp": map_data.get("saved_timestamp", map_file.stat().st_mtime),
                                "waypoint_count": len(map_data.get("waypoints", []))
                            })
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Error reading map file {map_file}: {e}")
                
                return jsonify({
                    "success": True,
                    "data": {
                        "maps": sorted(maps, key=lambda x: x["timestamp"], reverse=True)
                    }
                })
            except Exception as e:
                logger.error(f"‚ùå Error listing maps: {e}")
                return jsonify({"success": False, "error": str(e)}), 500
        
        @self.app.route('/api/slam/health', methods=['GET'])
        def health_check():
            """Health check endpoint"""
            return jsonify({
                "success": True,
                "data": {
                    "status": "healthy",
                    "timestamp": time.time(),
                    "slam_data_dir": str(self.slam_data_dir),
                    "slam_generator_available": self.slam_generator is not None
                }
            })
        
        @self.app.route('/api/slam/endpoints', methods=['GET'])
        def list_endpoints():
            """List all available API endpoints"""
            endpoints = []
            for rule in self.app.url_map.iter_rules():
                if rule.endpoint != 'static':
                    endpoints.append({
                        "endpoint": rule.rule,
                        "methods": list(rule.methods - {'HEAD', 'OPTIONS'})
                    })
            
            return jsonify({
                "success": True,
                "data": {
                    "endpoints": sorted(endpoints, key=lambda x: x["endpoint"])
                }
            })
    
    def set_slam_generator(self, slam_generator):
        """Set the SLAM generator instance for direct control"""
        self.slam_generator = slam_generator
        logger.info("üîó SLAM generator connected to API")
    
    def run(self, host: str = '0.0.0.0', port: int = 8081, debug: bool = False):
        """Run the Flask API server"""
        logger.info(f"üöÄ Starting LAIKA SLAM API on {host}:{port}")
        self.app.run(host=host, port=port, debug=debug)


# Example usage
if __name__ == "__main__":
    # Create API instance
    api = LAIKASLAMApi()
    
    # Try to connect to SLAM generator
    try:
        import sys
        sys.path.append('/home/pi/LAIKA')
        from laika_slam_file_generator import LAIKASLAMFileGenerator
        
        # Create and connect SLAM generator
        slam_generator = LAIKASLAMFileGenerator()
        slam_generator.start_file_generation()
        api.set_slam_generator(slam_generator)
        
        logger.info("‚úÖ SLAM generator connected")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not connect SLAM generator: {e}")
        logger.info("üîÑ API will serve static files only")
    
    # Run API server
    try:
        api.run(port=8081, debug=True)
    except KeyboardInterrupt:
        logger.info("üõë Shutting down SLAM API...")
    finally:
        if hasattr(api, 'slam_generator') and api.slam_generator:
            api.slam_generator.stop_file_generation()

